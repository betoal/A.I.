Inteligencia = Conocimientos + Búsqueda
Se analiza cada problema nuevo y se trata de formalizar una descripción que identifique:
  Variables con las que se puede describir el estado del problema.
  Identificar el estado inicial (con que se empieza).
  Estados finales/aceptables como solución.
  Operadores/acciones/transformaciones básicos/primitivos que permiten cambuar de estado (y sus restricciones/condiciones de aplicabilidad).

  "Aridad" := Cantidad de argumentos que requiere un predicado.
  
  
Problema de las jarras: Se tienen 2 jarras de 3 y 4 litros respectivamente
  i) x := # litros utilizados en jarra de 4
     y := # litros utilizados en jarra de 3
  ii) x = 0; y = 0;
  iii) x = 2; y = *(don´t care);
  iv) a)Llenar la jarra de 4.
      b)Llenar la jarra de 3.
      c)Transferir todo de 3 a 4 o hasta que se llene la de 4.
      d)Transferir todo de 4 a 3 o hasta que se llene la de 3.
      e)Vaciar la de 4.
      f)Vaciar la de 3.
  
  
  Estado inicial    Acción    Estado final
    x       y                   x                y
   0<x<4  0<y1<3      a        x=4              y1   
   0<x1<4 0<y<3       b        x1               y=3
   0<x1<4 0<y1<3      c        min(4,x1+y1)     y=0; (y1-(4-x1))
   0<x1<4 0<y1<3      d        x=0;(x1-(3-y1)   min(3,x1+y1)
   0<x1<4 0<y1<3      e        x=0              y1
   0<x1<4 0<y1<3      f        x1               y=0
   
Dominio de la función: Lo que se requiere hacer.        
   Se puede hacer un diagrama de transiciones.
   En la búsqueda se tiene que asegurar que no se repitan estados.
    Se puede utilizar la búsqueda en profundidad. {DFS}
    
  Para cada nodo:
    Empezar por el inicial.
    Visitar el nodo (incluye detectar nodo final).
    Agregar sus hijos a la cola.

Para las consultas:
  , -> concatenación.
  . -> fin de consulta.
  _ -> don´t care (variable anónima).
  Variables empiezan con mayúscula.
  Hechos empiezan en minúscula.
  fail -> Iteración de todos los datos.
  nl -> new line
  write -> imprime variables o texto.
  % -> comentario
  /* */ -> comentario multilínea
  :- -> if de reglas
  Predicado no determinístico -> Almacenar un punto de retroceso durante una búsqueda.

Aritmética:
  =:= -> igual que
  =\= -> diferente de (entre números).
  \== -> diferente de (entre objetos).
  =< -> menor o igual.
  rem -> residuo de división de números enteros.
  // -> cociente de división de números enteros
  ** -> exponenciación.
  is -> asignación de valor a variables.

Corte ("cut") ! Su valor lógico siempre es cierto. Elimina el más reciente punto de retroceso.
Fallo fail Su valor lógico siempre es falso. Se regresa al último punto de retroceso.

Predicados:
  De orden 0 -> Si los argumentos son todos constantes.
  De orden 1 -> Si hay variables entre sus argumentos.
  De orden 2 -> Si hay otros predicados entre sus argumentos.
    Functor: Predicado que se usa como argumento de otro predicado.

Lista: [1,2,3,4]; [['a','b'],['c]']
  Cabeza (primer elemento) 1; ['a','b']
  Cola (el resto de elementos) [2,3,4]; ['c']

  Lista=[cabeza|cola]

Base de Conocimientos Dinámica: [:-dynamic NOMBRE]
  La base de conocimientos puede variar durante el tiempo de ejecución => capacidad de aprendizaje.
  Predicados predefinidos:
    assert({hecho o regla}) := sirve para agregar un nuevo predicado o hecho.
    retract({hecho o regla}) := borra un hecho o predicado.
    retractall() := borra los predicados cuando están a la derecha.

Heurística: Regla específica del dominio de un sistema de I.A. diseñada
explícitamente para hacer más eficiente la búsqueda.   Características, no necesariamente algo probado, comprobable).
Conocimiento específico del dominio de un sistema de la I.A. cuyo propósito es guiar/simplificar la búsqueda.
	La hace más eficiente, pero no hay garantía de optimalidad ni en la calidad de la solución ni en el tiempo de resolución.

Función Heurística / Objetivo / Utilidad / Aptitud / Evaluación:
	Mide qué tan bueno es cada estado visitado durante la búsqueda.

**Tipos de Búsquedas**

Montañismo / Escalada / Alpinismo / (Hill Climbing):
	Dado el estado actual, evaluar cada estado subsecuente, eligiendo el primero  que tenga un valor mejor que el estado actual. (Descarta los demás "poda").

Escalada Maximizada (Steepest-Ascent) / Minimizada (Descent Hill-Climbing):
	Dado el estado actual, evaluar todos los posibles estados subsecuentes y elegir el que tenga el mejor valor. (Gradient search).

Búsqueda Optimizada (Best-First Search):
	Combina aspectos de BFS y DFS.
	Procede en profundidad pero mantiene abiertas otras ramas del árbol de búsqueda en caso de tener que explorarlas.

Búsqueda con Viga (Beam Search):
	Parecida a una búsqueda optimizada, pero limitando la cantidad de posibles estados "abiertos" en cada nivel del árbol de búsqueda (n = anchura de la viga).
	A* (A-Estrella, A-Star):
		Parecida a búsqueda optimizada, pero la función objetivo f(s) consiste de 2 partes: g(s) ^ h(s).
		g(s) es una medida del costo incurrido para llegar al estado actual.